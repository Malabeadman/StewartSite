import { ElementRef, EventEmitter, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { Overlay, OverlayPositionBuilder } from '@angular/cdk/overlay';
import { Subject } from 'rxjs';
import { BooleanInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
export declare class MdbPopoverDirective implements OnInit, OnDestroy {
    private _overlay;
    private _overlayPositionBuilder;
    private _elementRef;
    mdbPopover: TemplateRef<any> | string;
    mdbPopoverTitle: string;
    get popoverDisabled(): boolean;
    set popoverDisabled(value: boolean);
    private _popoverDisabled;
    placement: string;
    template: TemplateRef<any>;
    get animation(): boolean;
    set animation(value: boolean);
    private _animation;
    trigger: string;
    delayShow: number;
    delayHide: number;
    offset: number;
    popoverShow: EventEmitter<MdbPopoverDirective>;
    popoverShown: EventEmitter<MdbPopoverDirective>;
    popoverHide: EventEmitter<MdbPopoverDirective>;
    popoverHidden: EventEmitter<MdbPopoverDirective>;
    private _overlayRef;
    private _tooltipRef;
    private _open;
    private _showTimeout;
    private _hideTimeout;
    readonly _destroy$: Subject<void>;
    constructor(_overlay: Overlay, _overlayPositionBuilder: OverlayPositionBuilder, _elementRef: ElementRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    private _bindTriggerEvents;
    private _createOverlayConfig;
    private _createOverlay;
    private _getPosition;
    show(): void;
    hide(): void;
    toggle(): void;
    static ngAcceptInputType_animation: BooleanInput;
    static ngAcceptInputType_popoverDisabled: BooleanInput;
    static ɵfac: i0.ɵɵFactoryDeclaration<MdbPopoverDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<MdbPopoverDirective, "[mdbPopover]", ["mdbPopover"], { "mdbPopover": "mdbPopover"; "mdbPopoverTitle": "mdbPopoverTitle"; "popoverDisabled": "popoverDisabled"; "placement": "placement"; "template": "template"; "animation": "animation"; "trigger": "trigger"; "delayShow": "delayShow"; "delayHide": "delayHide"; "offset": "offset"; }, { "popoverShow": "popoverShow"; "popoverShown": "popoverShown"; "popoverHide": "popoverHide"; "popoverHidden": "popoverHidden"; }, never, never, false, never>;
}
